#################################################################
# @Program: bicluster.py                                        #
# @Version: 1                                                   #
# @Author: Chris Plaisier                                       #
# @Sponsored by:                                                #
# Nitin Baliga, ISB                                             #
# Institute for Systems Biology                                 #
# 1441 North 34th Street                                        #
# Seattle, Washington  98103-8904                               #
# (216) 732-2139                                                #
# @Also Sponsored by:                                           #
# Luxembourg Systems Biology Grant                              #
#                                                               #
# If this program is used in your analysis please mention who   #
# built it. Thanks. :-)                                         #
#                                                               #
# Copyrighted by Chris Plaisier  12/8/2009                      #
#################################################################

import os
from copy import deepcopy
from pssm import pssm

# A class designed to hold the information pertaining to a bicluster
# and be able to output this in many different formats.
#
# Variables:
# genes - list of genes in the cluster
# conditions - list of conditions in the cluster
# resid - residual
# residNorm - normalized residual
# cor - correlations to clinical traits
# surv - survival analysis with relevant variables
# pssmsUpstream - motifs from the upstream cis-regulatory region
# pssms3pUTR - motifs from the 3' UTR cis-regulatory region
#
# Functions:
# getName - reutnrs the biclusters name
# getNumGenes() - returns the number of genes in the bicluster
# getGenes() -  returns the gene names from the bicluster
# getNumConditions() - returns the number of conditions
# getConditions() - returns the names of the conditions from the bicluster
# getResidual() - returns the residual value for the bicluster
# getNormResidaul - returns the normalized residual value for the bicluster
# getCorrelations() - returns the results of correlations with clincal traits
# getSurvival() -  returns the results of survial analysis
# getPssmUpstream() - returns a pssm from the upstream cis-regulatory regions
# getPssmsUpstream() - returns all pssms from the upstream cis-regulatory regions
# getPssmsNamesUpstream() - returns a list of the pssm names for the upstream cis-regualtory regions
# getPssm3pUTR() - returns a pssm from the 3' UTR cis-regulatory regions
# getPssms3pUTR() - returns all pssms from the 3' UTR cis-regulatory regions
# getPssmsNames3pUTR() - returns a list of the pssm names for the 3' UTR cis-regualtory regions
# 
class bicluster:
    # Initialize the pssm
    def __init__(self, k):
        self.k = k
        self.readBicluster()
    
    # Reads in the bicluster file generated by cMonkeyWrapper
    def readBicluster(self):
        # Read in the bicluster score
        summaryFile = open('cluster.summary.csv','r')
        summaryFile.readline() # Skip the header
        scoreDict = {}
        for sumLine in summaryFile.readlines():
            splitUp = sumLine.strip().split(',')
            scoreDict[int(splitUp[0].strip('"'))] = splitUp[2]
        self.score = scoreDict[int(self.k)]
        # Read in genes
        geneFile = open('biclust/'+str(self.k)+'/genes.csv','r')
        geneFile.readline() # Skip header
        self.genes = [line.strip().split(',')[1].strip('"') for line in geneFile.readlines()]
        geneFile.close()
        # Read in conditions
        condFile = open('biclust/'+str(self.k)+'/conditions.csv','r')
        condFile.readline() # Skip header
        self.conditions = [line.strip().split(',')[1].strip('"') for line in condFile.readlines()]
        condFile.close()
        # Read in residuals
        residFile = open('biclust/'+str(self.k)+'/resid.csv','r')
        residFile.readline() # Skip header
        self.resid = residFile.readline().strip().split(',')[1]
        self.residNorm = residFile.readline().strip().split(',')[1]
        residFile.close()
        # Read in associations with clinical traits
        self.cor = {}
        corFile = open('biclust/'+str(self.k)+'/correlation.csv','r')
        corFile.readline() # Skip header
        for line in corFile.readlines():
            splitUp = line.strip().split(',')
            self.cor[splitUp[0].strip('"')] = {'cor':splitUp[1],'pValue':splitUp[2]}
        corFile.close()
        self.surv = {}
        survFile = open('biclust/'+str(self.k)+'/survival.csv','r')
        survFile.readline() # Skip header
        for line in survFile.readlines():
            splitUp = line.strip().split(',')
            self.surv[splitUp[0]] = {'zScore':splitUp[1],'pValue':splitUp[2]}
        survFile.close()
        # Now load up the PSSMs
        pssmUpFiles = os.listdir('biclust/'+str(self.k)+'/upstream')
        self.pssmsUpstream = []
        for pssmUpFile in pssmUpFiles:
            self.pssmsUpstream.append(pssm('biclust/'+str(self.k)+'/upstream/'+pssmUpFile,self.k))
        # Now read in the pssms
        pssmUTRFiles = os.listdir('biclust/'+str(self.k)+'/3pUTR')
        self.pssms3pUTR = []
        for pssmUTRFile in pssmUTRFiles:
            self.pssms3pUTR.append(pssm('biclust/'+str(self.k)+'/3pUTR/'+pssmUTRFile,self.k))

    # getName - reutnrs the biclusters name
    def getScore(self):
        return self.score
    
    # getName - reutnrs the biclusters name
    def getName(self):
        return 'Bicluster '+str(self.k)

    # getNumGenes() - returns the number of genes in the cluster
    def getNumGenes(self):
        return len(self.genes)

    # Returns the genes
    def getGenes(self):
        return deepcopy(self.genes)

    # getNumConditions() - returns the number of conditions
    def getNumConditions(self):
        return len(self.conditions)
    
    # getConditions() - returns the conditions
    def getConditions(self):
        return deepcopy(self.conditions)

    # Returns the residual value for the bicluster
    def getResidual(self):
        return deepcopy(self.resid)

    # Returns the normalized residual value for the bicluster
    def getNormResidual(self):
        return deepcopy(self.residNorm)

    # Returns the correlations of the median expression of the cluster to clinical traits
    def getCorrelations(self):
        return deepcopy(self.cor)

    # Returns the survial analysis of the median expression without and with covariates
    def getSurvival(self):
        return deepcopy(self.surv)

    # Returns a list of the upstream pssms for this biclutster
    def getPssmUpstream(self,pssmName):
        for i in self.pssmsUpstream:
            if i.getName()==pssmName:
                return deepcopy(i)
        return 'No such PSSM with that name!'
    
    # Returns a list of the upstream pssms for this bicluster
    def getPssmsUpstream(self):
        return deepcopy(self.pssmsUpstream)

    # Returns a list of the upstream pssm names for this bicluster
    def getPssmsNamesUpstream(self):
        names = []
        for i in self.pssmsUpstream:
            names.append(i.getName())
        return deepcopy(names)
    
    # Returns a list of the 3' UTR pssms for this bicluster
    def getPssm3pUTR(self,pssmName):
        for i in self.pssms3pUTR:
            if i.getName()==pssmName:
                return deepcopy(i)
        return 'No such PSSM with that name!'
    
    # Returns a list of the 3' UTR pssms for this bicluster
    def getPssms3pUTR(self):
        return deepcopy(self.pssms3pUTR)

    # Returns a list of the 3' UTR pssm names for this bicluster
    def getPssmsNames3pUTR(self):
        names = []
        for i in self.pssms3pUTR:
            names.append(i.getName())
        return deepcopy(names)

