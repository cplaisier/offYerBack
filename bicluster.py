#################################################################
# @Program: bicluster.py                                        #
# @Version: 1                                                   #
# @Author: Chris Plaisier                                       #
# @Sponsored by:                                                #
# Nitin Baliga, ISB                                             #
# Institute for Systems Biology                                 #
# 1441 North 34th Street                                        #
# Seattle, Washington  98103-8904                               #
# (216) 732-2139                                                #
# @Also Sponsored by:                                           #
# Luxembourg Systems Biology Grant                              #
#                                                               #
# If this program is used in your analysis please mention who   #
# built it. Thanks. :-)                                         #
#                                                               #
# Copyrighted by Chris Plaisier  12/8/2009                      #
#################################################################

import os
from pssm import pssm
import sqlite3 as lite

# A class designed to hold the information pertaining to a bicluster
# and be able to output this in many different formats.
#
# Variables:
# genes - list of genes in the cluster
# conditions - list of conditions in the cluster
# resid - residual
# residNorm - normalized residual
# cor - correlations to clinical traits
# surv - survival analysis with relevant variables
# pssmsUpstream - motifs from the upstream cis-regulatory region
# pssms3pUTR - motifs from the 3' UTR cis-regulatory region
#
# Functions:
# getName - reutnrs the biclusters name
# getNumGenes() - returns the number of genes in the bicluster
# getGenes() -  returns the gene names from the bicluster
# getNumConditions() - returns the number of conditions
# getConditions() - returns the names of the conditions from the bicluster
# getResidual() - returns the residual value for the bicluster
# getNormResidaul - returns the normalized residual value for the bicluster
# getCorrelations() - returns the results of correlations with clincal traits
# getSurvival() -  returns the results of survial analysis
# getPssmUpstream() - returns a pssm from the upstream cis-regulatory regions
# getPssmsUpstream() - returns all pssms from the upstream cis-regulatory regions
# getPssmsNamesUpstream() - returns a list of the pssm names for the upstream cis-regualtory regions
# getPssm3pUTR() - returns a pssm from the 3' UTR cis-regulatory regions
# getPssms3pUTR() - returns all pssms from the 3' UTR cis-regulatory regions
# getPssmsNames3pUTR() - returns a list of the pssm names for the 3' UTR cis-regualtory regions
# 
class bicluster:
    # Initialize the pssm
    def __init__(self, k, de_novo_method_upstream=None, de_novo_method_3pUTR=None, sqliteDb=None):
        self.k = k
        self.attributes = {}
        self.sqliteDb = sqliteDb
        self.readBicluster(de_novo_method_upstream, de_novo_method_3pUTR)

    # Reads in the bicluster file generated by cMonkeyWrapper
    def readBicluster(self, de_novo_method_upstream=None, de_novo_method_3pUTR=None):
        # Attach to the database
        con = lite.connect(self.sqliteDb)
        con.row_factory = lite.Row
        cur = con.cursor()
        # Get the number of biclusters in run
        q1 = 'SELECT name FROM row_members, row_names WHERE row_members.cluster='+str(self.k)+' and row_members.iteration=3001 and row_members.order_num=row_names.order_num'
        cur.execute(q1)
        data = cur.fetchall()
        self.genes = [str(i['name']) for i in data]
        # Read in conditions
        q1 = 'SELECT name FROM column_members, column_names WHERE column_members.cluster='+str(self.k)+' and column_members.iteration=3001 and column_members.order_num=column_names.order_num'
        cur.execute(q1)
        data = cur.fetchall()
        self.conditions = [i['name'] for i in data]
        # Read in residuals
        q1 = 'SELECT residual FROM cluster_residuals WHERE cluster='+str(self.k)+' and iteration=3001'
        cur.execute(q1)
        data = cur.fetchall()
        self.residNorm = float(data[0]['residual'])
        # At some point might be nice to figure out how to include this
        """# Read in associations with clinical traits
        self.cor = {}
        corFile = open('biclust/'+str(self.k)+'/correlation.csv','r')
        corFile.readline() # Skip header
        for line in corFile.readlines():
            splitUp = line.strip().split(',')
            self.cor[splitUp[0].strip('"')] = {'cor':splitUp[1],'pValue':splitUp[2]}
        corFile.close()
        self.surv = {}
        survFile = open('biclust/'+str(self.k)+'/survival.csv','r')
        survFile.readline() # Skip header
        for line in survFile.readlines():
            splitUp = line.strip().split(',')
            self.surv[splitUp[0]] = {'zScore':splitUp[1],'pValue':splitUp[2]}
        survFile.close()
        """
        # Now load up the PSSMs
        q1 = 'SELECT rowid, seqtype, motif_num, evalue FROM motif_infos WHERE cluster='+str(self.k)+' and iteration=3001'
        cur.execute(q1)
        motifs = cur.fetchall()
        # Set the de novo method
        if not de_novo_method_upstream==None:
            de_novo_method = de_novo_method_upstream
        else:
            de_novo_method = de_novo_method_3pUTR
        self.pssmsUpstream = []
        self.pssms3pUTR = []
        for motif in motifs:
            name = str(self.k)+'_motif'+str(motif['motif_num'])+'_'+de_novo_method
            q1 = 'SELECT row_names.name, motif_annotations.position, motif_annotations.reverse, motif_annotations.pvalue FROM motif_annotations, row_names WHERE motif_annotations.motif_info_id='+str(motif['rowid'])+' and motif_annotations.gene_num=row_names.order_num'
            cur.execute(q1)
            sites = [[str(i['name']), i['position'], i['reverse'], i['pvalue']] for i in cur.fetchall()]
            nsites = sites
            eValue = motif['evalue']
            q1 = 'SELECT a, c, g, t FROM motif_pssm_rows WHERE motif_info_id='+str(motif['rowid']) #+' and iteration=3001'
            cur.execute(q1)
            matrix = [[i['a'], i['c'], i['g'], i['t']] for i in cur.fetchall()]
            genes = list(set([i[0] for i in sites]))
            if motif['seqtype']=='upstream':
                self.pssmsUpstream.append(pssm(pssmFileName=None, biclusterName=name, nsites=nsites, eValue=eValue, pssm=matrix, genes=genes, de_novo_method=de_novo_method))
            else:
                self.pssms3pUTR.append(pssm(pssmFileName=None, biclusterName=name, nsites=nsites, eValue=eValue, pssm=matrix, genes=genes, de_novo_method=de_novo_method))
        con.close()

    # getName - reutnrs the biclusters name
    #def getScore(self):
    #    return self.score

    # getName - reutnrs the biclusters name
    def getName(self):
        return 'Bicluster '+str(self.k)

    # getNumGenes() - returns the number of genes in the cluster
    def getNumGenes(self):
        return len(self.genes)

    # Returns the genes
    def getGenes(self):
        return self.genes

    # getNumConditions() - returns the number of conditions
    def getNumConditions(self):
        return len(self.conditions)

    # getConditions() - returns the conditions
    def getConditions(self):
        return self.conditions

    # Returns the residual value for the bicluster
    def getResidual(self):
        return self.resid

    # Returns the normalized residual value for the bicluster
    def getNormResidual(self):
        return self.residNorm

    # Returns the correlations of the median expression of the cluster to clinical traits
    def getCorrelations(self):
        return self.cor

    # Returns the survial analysis of the median expression without and with covariates
    def getSurvival(self):
        return self.surv

    # Returns a list of the upstream pssms for this biclutster
    def getPssmUpstream(self,pssmName):
        for i in self.pssmsUpstream:
            if i.getName()==pssmName:
                return i
        return 'No such PSSM with that name!'

    # Returns a list of the upstream pssms for this bicluster
    def getPssmsUpstream(self):
        return self.pssmsUpstream

    # Returns a list of the upstream pssm names for this bicluster
    def getPssmsNamesUpstream(self):
        names = []
        for i in self.pssmsUpstream:
            names.append(i.getName())
        return names

    # Returns a list of the 3' UTR pssms for this bicluster
    def getPssm3pUTR(self,pssmName):
        for i in self.pssms3pUTR:
            if i.getName()==pssmName:
                return i
        return 'No such PSSM with that name!'

    # Returns a list of the 3' UTR pssms for this bicluster
    def getPssms3pUTR(self):
        return self.pssms3pUTR

    # Returns a list of the 3' UTR pssm names for this bicluster
    def getPssmsNames3pUTR(self):
        names = []
        for i in self.pssms3pUTR:
            names.append(i.getName())
        return names

    # Adds a PSSM to a bicluster
    def addPssmUpstream(self, pssm):
        self.pssmsUpstream.append(pssm)

    # Adds a PSSM to a bicluster
    def addPssm3pUTR(self, pssm):
        self.pssms3pUTR.append(pssm)

    # Add attribute
    def addAttribute(self, key=None, value=None):
        if key==None or value==None:
            print 'Error:  Key or Value have no data'
        self.attributes[key] = value

    # Get attribute
    def getAttribute(self, key):
        if not key in self.attributes:
            return None
        return self.attributes[key]

    # Get attribute
    def getAttributes(self):
        if not hasattr(self, 'attributes'):
            return None
        return self.attributes

